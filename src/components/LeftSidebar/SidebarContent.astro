---
import { getLanguageFromURL } from '~/util';
import { isSubPage } from '~/util/isSubPage';
import { Icon } from 'astro-icon';

export interface Props {
	type: TabType;
	defaultActiveTab: TabType;
	sidebarSections: Array<{
		text: string;
		type: TabType;
		children: Array<{ text: string; slug: string; isFallback?: boolean }>;
	}>;
	currentPageMatch: string;
}
type TabType = 'learn' | 'api';

const { type, defaultActiveTab, sidebarSections, currentPageMatch } = Astro.props as Props;
const lang = getLanguageFromURL(Astro.url.pathname);
---

{
	sidebarSections.map((section) => (
		<li class:list={['nav-group', type, defaultActiveTab === type && 'active']}>
			<details open>
				<summary class="nav-group-title">
					<h2>
						{section.text}		
					</h2>
					<Icon name="mdi:chevron-right" />
				</summary>
				<ul>
					{section.children.map(({ slug, text, isFallback }) => (
						<li class="nav-link">
							<a
								href={`${Astro.site?.pathname}${lang}/${slug}/`}
								aria-current={`${currentPageMatch.endsWith(slug) ? 'page' : 'false'}`}
								data-current-parent={`${isSubPage(currentPageMatch, slug) ? 'true' : 'false'}`}
								rel="prefetch"
							>
								<Fragment set:html={text} /> <!-- {isFallback && <sup class="fallback">EN</sup>} -->
							</a>
						</li>
					))}
				</ul>
			</details>
		</li>
	))
}

<style lang="scss">
	.nav-group {
		margin-bottom: 1rem;
	}
	.nav-group .placeholder {
		opacity: 0.6;
		text-align: center;
		display: block;
	}
	@media (max-width: 50em) {
		.sm-hidden {
			display: none !important;
		}
	}
	@media (min-width: 50em) {
		.nav-group {
			display: none;
			margin-bottom: 1.75rem;
		}
	}
	.nav-group.active {
		display: block;
	}
	.nav-group-title {
		font-size: 1em;
		font-weight: 700;
		padding: 0.5rem 2rem;
		transition: all .1s ease-in;
		background-color: var(--custom-green-25);
		&:hover, &:focus {
			background-color: var(--custom-green-50);
		}
		@media (min-width: 50em) {
			border-radius: 1em 0 0 1em;
			font-size: 1.1em;
			padding: 0.3rem 2rem;
		}
		border-radius: 0em 0 0 0em;
		padding: 0.5rem 1rem;
		display: flex;
		justify-content: space-between;
		h2{
			background: none;
			color: var(--theme-text-light)
		}
	}

	.nav-link a {
		margin: 1px;
		padding: 0.5rem 1rem;
		@media (min-width: 50em) {
			padding: 0.3rem 2rem;
			border-radius: 1em 0 0 1em;
		}
		font: inherit;
		color: var(--theme-text-light);
		text-decoration: none;
		display: block;
		$indent: 0em;
		width: calc(100% - #{$indent});
		position: relative;
		cursor:pointer;
		left: $indent;
		border-radius: 0em 0 0 0em;
		&:hover {
			// font-weight: 700;
			// border-bottom: 1px dotted var(--custom-dark-blue);
		}
		&:hover,
		&:focus {
			background-color: var(--custom-grey-1-10);
		}

		&[aria-current='page'],
		&[data-current-parent='true'] {
			color: var(--theme-text-light);
			// background-color: var(--custom-teal-25);
			
			font-weight: 500;
			font-style: italic;
			/* Indicates the current page for forced colors users in older browsers */
			outline: 1px solid transparent;

			&:focus {
				// outline: 2px solid;
			}
		}

		@media (forced-colors: active) {
			&[aria-current='page'],
			&[data-current-parent='true'] {
				border: 1px solid LinkText;
			}
		}
	}

	@media (min-width: 50em) {
		.nav-group-title,
		.nav-link a {
			padding: 0.3rem 1rem;
		}
	}

	:global(:root.theme-dark) .nav-link a[aria-current='page'],
	:global(:root.theme-dark) .nav-link a[data-current-parent='true'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}

	.fallback {
		font-size: 0.75em;
		line-height: 1;
		font-weight: bold;
		color: var(--theme-text-light);
	}

	details > summary {
		list-style: none;
	}

	details > summary::marker,
	details > summary::-webkit-details-marker {
		display: none;
	}

	details[open] > summary svg {
		transform: rotate(90deg);
	}

	summary {
		cursor: pointer;
	}

	summary h2 {
		all: inherit;
		margin: 0;
		padding: 0;
	}

	svg {
		transform: rotate(0);
		transition: 0.15s transform ease;
		vertical-align: middle;
	}

	:global([dir='rtl']) svg {
		transform: rotate(180deg);
	}

	svg path {
		fill: currentColor;
	}
</style>
